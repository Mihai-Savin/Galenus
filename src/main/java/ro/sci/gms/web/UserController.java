package ro.sci.gms.web;

import java.sql.SQLException;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import ro.sci.gms.domain.Blood;
import ro.sci.gms.domain.Doctor;
import ro.sci.gms.domain.Gender;
import ro.sci.gms.domain.Patient;
import ro.sci.gms.domain.Role;
import ro.sci.gms.domain.User;
import ro.sci.gms.service.DoctorService;
import ro.sci.gms.service.PatientService;
import ro.sci.gms.service.UserService;
import ro.sci.gms.service.ValidationException;

/**
 * Controller class handling all requests of logged in users - patients or
 * doctors.
 * 
 * @author Mihai Savin
 *
 */
@Controller
@RequestMapping("/user")
public class UserController {

	@Autowired
	private UserService userService;
	@Autowired
	private PatientService patientService;
	@Autowired
	private DoctorService doctorService;

	/**
	 * Mocked logged-in users: generic, patient and doctor. Will be replaced in
	 * production by users generated by Spring, after authentication process is
	 * complete.
	 */
	@Autowired
	private User loggedUser;
	/**
	 * Mocked logged-in users: generic, patient and doctor. Will be replaced in
	 * production by users generated by Spring, after authentication process is
	 * complete.
	 */
	@Autowired
	private Patient loggedPatient;
	/**
	 * Mocked logged-in users: generic, patient and doctor. Will be replaced in
	 * production by users generated by Spring, after authentication process is
	 * complete.
	 */
	@Autowired
	private Doctor loggedDoctor;

	/**
	 * User's entry point. If user has no specific role (patient or doctor) he
	 * will land here.
	 * 
	 * @return a ModelAndView Object containing the user data from DAO.
	 */
	@RequestMapping("")
	public ModelAndView userShow() {

		//temporary
		loggedUser = loggedPatient;
		
		ModelAndView modelAndView = new ModelAndView("user");
		modelAndView.addObject("user", loggedUser);

		return modelAndView;
	}
	
	@RequestMapping("/patient")
	public String patientShow() {

		loggedPatient.setId(11226); // 10L on heroku //11226L on localhost
		loggedPatient.setRole(Role.user);
		loggedPatient.setDateOfBirth(new Date());
		loggedPatient.setGender(Gender.FEMALE);
		loggedPatient.setBloodType(Blood.A);
		loggedPatient.setDoctor(new Doctor());

		return "patient_index";
	}

	@RequestMapping("/patient/profile")
	public ModelAndView patientEdit() {

		Patient patient = patientService.getPatient(loggedPatient.getId()); // 10L on heroku,
																// 11226L on
																// localhost

		ModelAndView modelAndView = new ModelAndView("patient_edit");
		modelAndView.addObject("patient", patient);

		return modelAndView;
	}
	
	@RequestMapping(value = "/patient/profile", method = RequestMethod.POST)
	public String patientSave(@ModelAttribute Patient patient) throws ValidationException, SQLException {
		patientService.save(patient);
		return "success";
	}

	@RequestMapping("/doctor")
	public String doctorShow() {
		loggedDoctor.setAddress("Malysia");
		return "doctor_index";
	}
	
	@RequestMapping("/doctor/profile")
	public ModelAndView doctorEdit() {

		Doctor doctor = doctorService.getDoctor(loggedDoctor.getId()); // 10L on heroku,
															// 11226L on
															// localhost

		ModelAndView modelAndView = new ModelAndView("doctor_edit");
		modelAndView.addObject("doctor", doctor);

		return modelAndView;
	}

	@RequestMapping(value = "/doctor/profile", method = RequestMethod.POST)
	public String doctorSave(Doctor doctor) throws ValidationException, SQLException {
		doctor.setId(11226); // 10L on heroku //11226L on localhost
		doctor.setRole(Role.user);doctorService.save(doctor);
		return "success";
	}

	@RequestMapping(value = "/generate")
	public String generatePatient() throws ValidationException, SQLException {
		Patient patient = new Patient();
		patient.setFirstName("Angela");
		patient.setLastName("Merkel");
		patient.setUsername("angela.merkel");
		patient.setPassword("DeutschLand");
		patient.setEmail("angela.merkel@bundesregierung.de");
		patient.setAddress("Lichtenstein");
		patient.setPhone("+49 89 636 48018");
		patient.setRole(Role.user);

		patient.setDateOfBirth(new Date());
		patient.setGender(Gender.FEMALE);
		patient.setBloodType(Blood.A);
		patient.setDoctor(new Doctor());
		patient.setMedicalBackground("Loves to smoke weed.");

		patientService.save(patient);
		patient.see();
		return "success";
	}

}
